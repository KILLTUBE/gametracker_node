var dgram = require("dgram");var fs = require('fs');// circumvent nodejs/v8 "bug":// https://github.com/PythonJS/PythonJS/issues/111// http://perfectionkills.com/global-eval-what-are-the-options/// e.g. a "function test() {}" will be undefined, but "test = function() {}" will existvar globalEval = (function() {	var isIndirectEvalGlobal = (function(original, Object) {		try {			// Does `Object` resolve to a local variable, or to a global, built-in `Object`,			// reference to which we passed as a first argument?			return (1, eval)('Object') === original;		} catch (err) {			// if indirect eval errors out (as allowed per ES3), then just bail out with `false`			return false;		}	})(Object, 123);	if (isIndirectEvalGlobal) {		// if indirect eval executes code globally, use it		return function(expression) {			return (1, eval)(expression);		};	} else if (typeof window.execScript !== 'undefined') {		// if `window.execScript exists`, use it		return function(expression) {			return window.execScript(expression);		};	}	// otherwise, globalEval is `undefined` since nothing is returned})();function include(filename) {	file_contents = fs.readFileSync(filename, "utf8");	try {		//console.log(file_contents);		globalEval(file_contents);	} catch (e) {		e.fileName = filename;		keys = ["columnNumber", "fileName", "lineNumber", "message", "name", "stack"]		for (key in keys) {			k = keys[key];			console.log(k, " = ", e[k])		}		fo = e;		//throw new Error("include failed");	}}include("php.js");include("config.js");include("time.js");include("cod2.js");include("string.js");include("gameservers.js")include("masterserver.js")var mysql = require("mysql").createConnection({	//host: mysql_host,	//port: mysql_port,	socketPath: mysql_sock,	user: mysql_user,	password: mysql_pass});var fakeport = undefined; // make globalvar debug = undefined;mysql.query("USE " + mysql_database, function(err) {	main();});function main() {	console.log("READY TO FIGHT");		debug = false;	//debug = true;	if (debug)	{		fakeport = 666;		updateGameserver("85.25.95.104", 28968);	} else {		updateAll();		deleteCrapServers();		queryMasterserver();	}}function repl() {	var buffer = '';	process.stdin.on('data', function(chunk) {		buffer += chunk.toString('utf8');	});	require('repl').start({		input: process.stdin,		output: process.stdout,		'eval': function (cmd, context, filename, callback) {			console.log(buffer);			try {				callback(null, eval(buffer));			} catch (e) {				console.log(e);			}			buffer = '';		}	});}repl();